"use client";

import { useEffect, useState } from "react";
import { useAccount } from "wagmi";
import { CameraIcon, DocumentTextIcon, EyeIcon } from "@heroicons/react/24/outline";
import { useScaffoldReadContract, useScaffoldWriteContract } from "~~/hooks/scaffold-eth";

const ExecutorPage = () => {
  const { address: connectedAddress } = useAccount();
  const [treeId, setTreeId] = useState("");
  const [imageHash, setImageHash] = useState("");
  const [documentHash, setDocumentHash] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [availableTrees, setAvailableTrees] = useState<any[]>([]);
  const [selectedTree, setSelectedTree] = useState<any>(null);
  const [showAvailableTrees, setShowAvailableTrees] = useState(false);

  // –ß–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { data: userStats } = useScaffoldReadContract({
    contractName: "TreeChain",
    functionName: "getUserStats",
    args: [connectedAddress],
  });

  // –•—É–∫ –¥–ª—è –ø–æ—Å–∞–¥–∫–∏ –¥–µ—Ä–µ–≤–∞
  const { writeContractAsync: plantTreeAsync } = useScaffoldWriteContract({
    contractName: "TreeChain",
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ—Ä–µ–≤—å–µ–≤ (—Å–∏–º—É–ª—è—Ü–∏—è)
  const loadAvailableTrees = async () => {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ API –∏–ª–∏ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
    // –ü–æ–∫–∞ —á—Ç–æ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const mockTrees = [
      { id: 1, species: "–î—É–±", location: "–ú–æ—Å–∫–≤–∞, –ø–∞—Ä–∫ –°–æ–∫–æ–ª—å–Ω–∏–∫–∏", donor: "0x123...", status: "available" },
      { id: 2, species: "–°–æ—Å–Ω–∞", location: "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –õ–µ—Ç–Ω–∏–π —Å–∞–¥", donor: "0x456...", status: "available" },
      { id: 3, species: "–ë–µ—Ä–µ–∑–∞", location: "–ö–∞–∑–∞–Ω—å, –ø–∞—Ä–∫ –ì–æ—Ä—å–∫–æ–≥–æ", donor: "0x789...", status: "available" },
    ];
    setAvailableTrees(mockTrees);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ IPFS (—Å–∏–º—É–ª—è—Ü–∏—è)
  const uploadToIPFS = async (file: File): Promise<string> => {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å IPFS
    // –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ö–µ—à
    const randomHash = "Qm" + Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
    return randomHash;
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const handleImageUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setIsLoading(true);
      try {
        const hash = await uploadToIPFS(file);
        setImageHash(hash);
        alert(`–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞! IPFS —Ö–µ—à: ${hash}`);
      } catch (error) {
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏");
      } finally {
        setIsLoading(false);
      }
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  const handleDocumentUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setIsLoading(true);
      try {
        const hash = await uploadToIPFS(file);
        setDocumentHash(hash);
        alert(`–î–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã! IPFS —Ö–µ—à: ${hash}`);
      } catch (error) {
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤");
      } finally {
        setIsLoading(false);
      }
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–µ—Ä–µ–≤–∞
  const handleTreeSelect = (tree: any) => {
    setTreeId(tree.id.toString());
    setSelectedTree(tree);
    setShowAvailableTrees(false);
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ—Ä–µ–≤—å—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    loadAvailableTrees();
  }, []);

  const handlePlantTree = async () => {
    if (!treeId || !imageHash || !documentHash) {
      alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è");
      return;
    }

    setIsLoading(true);
    try {
      await plantTreeAsync({
        functionName: "plantTree",
        args: [BigInt(treeId), imageHash, documentHash],
      });

      alert("–û—Ç—á–µ—Ç –æ –ø–æ—Å–∞–¥–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.");
      setTreeId("");
      setImageHash("");
      setDocumentHash("");
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞:", error);
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.");
    } finally {
      setIsLoading(false);
    }
  };

  if (!connectedAddress) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <h1 className="text-2xl font-bold mb-4">–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫</h1>
          <p className="text-gray-600">–î–ª—è —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫</p>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="max-w-4xl mx-auto">
        <div className="text-center mb-8">
          <div className="text-6xl mb-4">üå±</div>
          <h1 className="text-4xl font-bold text-green-600 mb-4">–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å</h1>
          <p className="text-lg text-gray-600">–°–∞–∂–∞–π—Ç–µ –¥–µ—Ä–µ–≤—å—è –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã –≤ —Ç–æ–∫–µ–Ω–∞—Ö</p>
        </div>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
        {userStats && (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-8">
            <div className="bg-green-100 p-6 rounded-lg text-center">
              <div className="text-4xl mb-2">üå≥</div>
              <p className="text-2xl font-bold text-green-600">{userStats[1]?.toString() || "0"}</p>
              <p className="text-sm text-gray-600">–î–µ—Ä–µ–≤—å–µ–≤ –ø–æ—Å–∞–∂–µ–Ω–æ</p>
            </div>
            <div className="bg-blue-100 p-6 rounded-lg text-center">
              <p className="text-2xl font-bold text-blue-600">{((Number(userStats[1]) || 0) * 0.008).toFixed(4)} ETH</p>
              <p className="text-sm text-gray-600">–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–∞–≥—Ä–∞–¥—ã</p>
            </div>
          </div>
        )}

        {/* –§–æ—Ä–º–∞ –ø–æ—Å–∞–¥–∫–∏ */}
        <div className="bg-white rounded-lg shadow-lg p-8">
          <h2 className="text-2xl font-bold mb-6 text-center">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –æ –ø–æ—Å–∞–¥–∫–µ</h2>

          <div className="space-y-6">
            {/* –í—ã–±–æ—Ä –¥–µ—Ä–µ–≤–∞ */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ—Ä–µ–≤–æ –¥–ª—è –ø–æ—Å–∞–¥–∫–∏ *</label>
              <div className="space-y-2">
                <div className="flex gap-2">
                  <input
                    type="text"
                    value={treeId}
                    onChange={e => setTreeId(e.target.value)}
                    placeholder="ID –¥–µ—Ä–µ–≤–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞"
                    className="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                  />
                  <button
                    type="button"
                    onClick={() => setShowAvailableTrees(!showAvailableTrees)}
                    className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 flex items-center gap-2"
                  >
                    <EyeIcon className="h-4 w-4" />
                    –í—ã–±—Ä–∞—Ç—å
                  </button>
                </div>

                {showAvailableTrees && (
                  <div className="border border-gray-300 rounded-md max-h-40 overflow-y-auto">
                    {availableTrees.map(tree => (
                      <div
                        key={tree.id}
                        onClick={() => handleTreeSelect(tree)}
                        className="p-3 hover:bg-gray-50 cursor-pointer border-b border-gray-200 last:border-b-0"
                      >
                        <div className="font-medium">
                          –î–µ—Ä–µ–≤–æ #{tree.id} - {tree.species}
                        </div>
                        <div className="text-sm text-gray-600">{tree.location}</div>
                        <div className="text-xs text-gray-500">–î–æ–Ω–æ—Ä: {tree.donor}</div>
                      </div>
                    ))}
                  </div>
                )}

                {selectedTree && (
                  <div className="p-3 bg-green-50 rounded-md">
                    <div className="font-medium text-green-800">
                      –í—ã–±—Ä–∞–Ω–æ: –î–µ—Ä–µ–≤–æ #{selectedTree.id} - {selectedTree.species}
                    </div>
                    <div className="text-sm text-green-600">{selectedTree.location}</div>
                  </div>
                )}
              </div>
            </div>

            {/* –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø–æ—Å–∞–¥–∫–∏ *</label>
              <div className="space-y-2">
                <div className="flex items-center gap-2">
                  <CameraIcon className="h-5 w-5 text-gray-400" />
                  <input
                    type="file"
                    accept="image/*"
                    onChange={handleImageUpload}
                    className="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                  />
                </div>
                {imageHash && (
                  <div className="p-2 bg-green-50 rounded text-sm">
                    <span className="font-medium">IPFS —Ö–µ—à:</span> {imageHash}
                  </div>
                )}
              </div>
            </div>

            {/* –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –î–æ–∫—É–º–µ–Ω—Ç—ã (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç) *
              </label>
              <div className="space-y-2">
                <div className="flex items-center gap-2">
                  <DocumentTextIcon className="h-5 w-5 text-gray-400" />
                  <input
                    type="file"
                    accept=".pdf,.doc,.docx,.txt"
                    onChange={handleDocumentUpload}
                    className="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                  />
                </div>
                {documentHash && (
                  <div className="p-2 bg-green-50 rounded text-sm">
                    <span className="font-medium">IPFS —Ö–µ—à:</span> {documentHash}
                  </div>
                )}
              </div>
            </div>

            <div className="bg-yellow-50 p-4 rounded-lg">
              <h3 className="font-semibold mb-2">–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø–æ—Å–∞–¥–∫—É:</h3>
              <p className="text-lg font-bold text-green-600">0.008 ETH</p>
              <p className="text-sm text-gray-600 mt-1">–ù–∞–≥—Ä–∞–¥–∞ –±—É–¥–µ—Ç –≤—ã–ø–ª–∞—á–µ–Ω–∞ –ø–æ—Å–ª–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ—Å–∞–¥–∫–∏</p>
            </div>

            <button
              onClick={handlePlantTree}
              disabled={isLoading || !treeId || !imageHash || !documentHash}
              className="w-full bg-green-600 text-white py-3 px-6 rounded-md font-semibold hover:bg-green-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors"
            >
              {isLoading ? "–û—Ç–ø—Ä–∞–≤–∫–∞..." : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç"}
            </button>
          </div>
        </div>

        {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
        <div className="mt-8 bg-green-50 p-6 rounded-lg">
          <h3 className="text-lg font-semibold mb-4">–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª–µ–π:</h3>
          <div className="space-y-4">
            <div className="bg-white p-4 rounded-lg">
              <h4 className="font-semibold text-green-800 mb-2">üå≥ ID –¥–µ—Ä–µ–≤–∞</h4>
              <p className="text-sm text-gray-700 mb-2">–°–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è ID –¥–µ—Ä–µ–≤–∞:</p>
              <ul className="text-sm text-gray-600 space-y-1 ml-4">
                <li>‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–í—ã–±—Ä–∞—Ç—å" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ—Ä–µ–≤—å–µ–≤</li>
                <li>‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ ID –æ—Ç –¥–æ–Ω–æ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –∫—É–ø–∏–ª –¥–µ—Ä–µ–≤–æ</li>
                <li>‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã</li>
                <li>‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç–ª–∞–¥–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –¥–µ—Ä–µ–≤—å–µ–≤</li>
              </ul>
            </div>

            <div className="bg-white p-4 rounded-lg">
              <h4 className="font-semibold text-green-800 mb-2">üì∑ IPFS —Ö–µ—à —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</h4>
              <p className="text-sm text-gray-700 mb-2">–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–æ—Å–∞–¥–∫–∏:</p>
              <ul className="text-sm text-gray-600 space-y-1 ml-4">
                <li>‚Ä¢ –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –ø–æ—Å–∞–∂–µ–Ω–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞</li>
                <li>‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–µ "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø–æ—Å–∞–¥–∫–∏" –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏</li>
                <li>‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∑–∏—Ç —Ñ–∞–π–ª –≤ IPFS</li>
                <li>‚Ä¢ –í—ã –ø–æ–ª—É—á–∏—Ç–µ IPFS —Ö–µ—à –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –±–ª–æ–∫—á–µ–π–Ω</li>
              </ul>
            </div>

            <div className="bg-white p-4 rounded-lg">
              <h4 className="font-semibold text-green-800 mb-2">üìÑ IPFS —Ö–µ—à –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</h4>
              <p className="text-sm text-gray-700 mb-2">–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏:</p>
              <ul className="text-sm text-gray-600 space-y-1 ml-4">
                <li>‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç —Å GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –ø–æ—Å–∞–¥–∫–∏</li>
                <li>‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏–ª–∏ –¥—Ä—É–≥–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã</li>
                <li>‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–µ "–î–æ–∫—É–º–µ–Ω—Ç—ã" –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏</li>
                <li>‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∑–∏—Ç —Ñ–∞–π–ª –≤ IPFS</li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ExecutorPage;
